/**************************************************\
|                                                  |
| PROJECT:                                         |
|   EZ_EDT                                         |
|                                                  |
|                                                  |
|                                                  |
| AUTHORS:                                         |
|   - Luca SCIMONE                                 |
|   - Thomas TREMBLE                               |
|                                                  |
\**************************************************/


/*________________________________________________________________________________________________
Cr√©ation d'un emplois du temps
Selection operator: Tournament
________________________________________________________________________________________________*/

#include <cmath>
#include <string>
#include <stdio.h> 
#include <stdlib.h>
#include <time.h>

\User declarations : 

#include <vector>
#include <iostream>
#include <fstream>
#include <iomanip>
#include "json.hpp"
using json=nlohmann::json;
json jf;
json jo;
using namespace std;
int score = 0;

/* MUTATION */
#define MUTATION_MIN  10
#define MUTATION_MAX  1000*2
#define MUTATION_BIAS 0.8

/* PENALITIES */
#define PENALITY_MANDATORY        1000000
#define PENALITY_STRONG_TEACHERS  50
#define PENALITY_MEDIUM_TEACHERS  10
#define PENALITY_WEAK_TEACHERS    3
#define PENALITY_MEDIUM_STUDENTS  3
#define PENALITY_WEAK_STUDENTS    1

/* EDT */
#define DAYS_PER_WEEK 5

clock_t begin_timer;
clock_t end_timer;
double  duration = 0.0;

\end

\User functions:
void init_json(){
    ifstream ifs("projet.json");
    jf = json::parse(ifs);
}

void init_day ( GenomeClass * genome, int day_idx );
//float count_week_hours ( Genomeclass * s );


/* ==== CHOOSE ONE ==== */


int pick_a_teacher ( void )
{
  return random(0,10);
}

int pick_a_room ( void )
{
  return random(0,4);
}

int pick_a_course_type ( void ) 
{ 
return random(0, 5); 
}

int pick_an_hour ( void ) 
{ 
return random(0, 4); 
}

int pick_a_day ( void ) 
{ 
  return random(0, 5); 
}

/* ==== CALENDAR ==== */

void init_hour( GenomeClass * genome, int day_idx, int hour_idx )
{
    for(int w = 0; w<11; w++)
    {
        genome->days[day_idx].hours[hour_idx].teacher[w] = false;
        genome->days[day_idx].hours[hour_idx].salles[w] = 0;
        genome->days[day_idx].hours[hour_idx].type[w] = 0;
        for(int g = 0; g<8 ;g++ )
        {
            genome->days[day_idx].hours[hour_idx].groupes[w].grp[g] = false;
        }
    }
}

void add_hour_exist(GenomeClass * genome, int day_idx, int idx)
{
    int room_id    = -1;
    /*PROF*/
    int prof_id = pick_a_teacher();
    /*
      math      0  - 3
      physic    3 -  6
      info      6  - 9
      english   9 - 11
    */

    /* ROOM AND TEACHER*/
    
    if ( prof_id < 3)
    {
        room_id = random(0,2);
        genome->days[day_idx].hours[idx].teacher[prof_id]=true;
        genome->days[day_idx].hours[idx].salles[prof_id]=room_id;
        genome->days[day_idx].hours[idx].type[prof_id]= 0;
        int i = random(0,8);
        int k = 0;
        switch (i) 
        {
            case 0 :
                k = random(1,3);
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i] = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k] = true;
                break;
            case 1:
                if ( tossCoin() )
                {
                    k = 0;
                    genome->days[day_idx].hours[idx].groupes[prof_id].grp[i] = true;
                    genome->days[day_idx].hours[idx].groupes[prof_id].grp[k] = true;
                }
                else
                {
                    k = 2;
                    genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                    genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                }
                break;
            case 2:
                k = random(0,2);
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                break;
            case 3:
                k = 4;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                break;
            case 4:
                k = 3;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                break;
            case 5:
                k = 6;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                break;
            case 6:
                k = 5;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                break;
            default :
                break;
        }
    }
    else if(prof_id >2 && prof_id <6)
    {

        int i = random(0,8);
        room_id = random(0,3);

        genome->days[day_idx].hours[idx].teacher[prof_id]  = true;
        genome->days[day_idx].hours[idx].salles[prof_id]  = room_id;
        int k = 0;
        switch (i)
        {
            case 0 :
                k = random(1,3);
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                break;
            case 1:
                if ( tossCoin() ){
                    k = 0;
                    genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                    genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                }
                else{
                    k = 2;
                    genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                    genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                }
                break;
            case 2:
                k = random(0,2);
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                break;
            case 3:
                k = 4;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                break;
            case 4:
                k = 3;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                break;
            case 5:
                k = 6;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                break;
            case 6:
                k = 5;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[k]  = true;
                break;
            default :
                break;

        }
        if ( tossCoin() )
        {
            genome->days[day_idx].hours[idx].type[prof_id]  = 2;
        }
        else
        {
            genome->days[day_idx].hours[idx].type[prof_id]  = 3;
        }

    }
    else if(prof_id > 5 && prof_id < 9)
    {
        int i = random(0,8);
        room_id = 3 ;
        genome->days[day_idx].hours[idx].teacher[prof_id]  = true;
        genome->days[day_idx].hours[idx].salles[prof_id]  = room_id;
        genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;

        if ( tossCoin() )
        {
            genome->days[day_idx].hours[idx].type[prof_id]  = 3;
        }
        else
        {
            genome->days[day_idx].hours[idx].type[prof_id]  = 4;
        }
        

        
    }
    else if(prof_id > 8 && prof_id < 11)
    {
        int i = random(0,8);
        room_id = 4 ;
        genome->days[day_idx].hours[idx].teacher[prof_id]  = true;
        genome->days[day_idx].hours[idx].salles[prof_id]  = room_id;
        genome->days[day_idx].hours[idx].type[prof_id]  = 4;
        switch (i) 
        {
            case 0 :
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[1]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[2]  = true;
                break;
            case 1:
                    genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                    genome->days[day_idx].hours[idx].groupes[prof_id].grp[0]  = true;
                    genome->days[day_idx].hours[idx].groupes[prof_id].grp[2]  = true;
                break;
            case 2:
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[1]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[0]  = true;
                break;
            case 3:
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[4]  = true;
                break;
            case 4:
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[3]  = true;
                break;
            case 5:
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[6]  = true;
                break;
            case 6:
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[i]  = true;
                genome->days[day_idx].hours[idx].groupes[prof_id].grp[5]  = true;
                break;
            default :
                break;

        }

    }
}


void init_semaine(GenomeClass * genome){
    for(int d=0;d<5;d++){
        for(int h=0;h<4;h++){
            init_hour(genome,d,h);
        }
    }
}


/* ==== EVALUTATE AND CHECK CONSTRAINTS ==== */
  
  /* == HOURS == */

int check_hour ( GenomeClass * g, int day_idx, int hour_idx )
{
    int score = 0;
    // get all week course at the same time
    for ( int d = 0 ; d < 5 ; d++ )
    {
        int same_room_course = 0;
        int same_teacher_in_multiple_rooms = 0;
        for ( int d = 0 ; d < 5 ; d++ )
        {
            for (int h = 0 ; h < 4 ; h++)
            {
                for ( int k = 0 ; k < 5 ; k++ )
                {
                    for (int l = 0 ; l < 5 ; l++ )
                    {
                        if(g->days[d].hours[h].salles[k] == g->days[d].hours[h].salles[l])
                        {
                            same_room_course += 1;
                        }
                        else if(g->days[d].hours[h].teacher[k] == g->days[d].hours[h].teacher[l])
                        {
                            same_teacher_in_multiple_rooms += 1;
                        }
    
                    }
                }
            }
            if ( same_room_course > 5 )
            {
                score += PENALITY_MANDATORY;
            }
            if ( same_teacher_in_multiple_rooms > 5 )
            {
                score += PENALITY_MANDATORY;         
            }
        }
    }

    return score;
}


/* == TEACHERS == */
int check_teacher( const GenomeClass * g, int days )
{
    int score = 0;
    //Penalit√© demi journ√©e
    for ( int i = 0 ; i < 11 ; i++ )
    {
    if ((g->days[days].hours[0].teacher[i]) 
        || (g->days[days].hours[1].teacher[i]))
        {
          score += PENALITY_WEAK_TEACHERS;
        }
        if ((g->days[days].hours[1].teacher[i]) 
        || (g->days[days].hours[2].teacher[i]))
        {
          score += PENALITY_WEAK_TEACHERS;
        }     
    }
    //p√©nalit√© trou
    for ( int i = 0 ; i < 11 ; i++ )
    {
        if ((g->days[days].hours[0].teacher[i]) 
        || (g->days[days].hours[2].teacher[i]))
        {
            score += PENALITY_WEAK_TEACHERS;
        }
        if ((g->days[days].hours[1].teacher[i]) 
        || (g->days[days].hours[3].teacher[i]))
        {
            score += PENALITY_WEAK_TEACHERS;
        }
    }
    //p√©nalit√© grand trou
    for ( int i = 0 ; i < 11 ; i++ )
    {
        if ((g->days[days].hours[0].teacher[i]) 
        || (g->days[days].hours[3].teacher[i]))
        {
            score += PENALITY_MEDIUM_TEACHERS;
        }
    } 
    //p√©nalit√© journ√©e surchag√©
    for ( int i = 0 ; i < 11 ; i++ )
    {
        if ((g->days[days].hours[0].teacher[i]) 
        && (g->days[days].hours[1].teacher[i])
        && (g->days[days].hours[2].teacher[i])
        && (g->days[days].hours[3].teacher[i]))
        {
            score += PENALITY_WEAK_TEACHERS;
        }
    }
    //p√©nalit√© journ√©e vide
    for( int i = 0 ; i < 11 ; i++ )
    {
        if ((g->days[days].hours[0].teacher[i]) 
        && (g->days[days].hours[1].teacher[i]==false)
        && (g->days[days].hours[2].teacher[i]==false)
        && (g->days[days].hours[3].teacher[i]==false))
        {
            score += PENALITY_WEAK_TEACHERS;
        }
        if ((g->days[days].hours[0].teacher[i]==false) 
        && (g->days[days].hours[1].teacher[i])
        && (g->days[days].hours[2].teacher[i]==false)
        && (g->days[days].hours[3].teacher[i]==false))
        {
            score += PENALITY_WEAK_TEACHERS;
        }
        if ((g->days[days].hours[0].teacher[i]==false) 
        && (g->days[days].hours[1].teacher[i]==false)
        && (g->days[days].hours[2].teacher[i])
        && (g->days[days].hours[3].teacher[i]==false))
        {
            score += PENALITY_WEAK_TEACHERS;
        }
        if ((g->days[days].hours[0].teacher[i]==false) 
        && (g->days[days].hours[1].teacher[i]==false)
        && (g->days[days].hours[2].teacher[i]==false)
        && (g->days[days].hours[3].teacher[i]))
        {
            score += PENALITY_WEAK_TEACHERS;
        }
    }
    return score;
}
int check_total_prof(GenomeClass * Genome){
    for ( int i = 0 ; i < 11 ; i++ )
    {
        int nb_heures = 0;
        for ( int d = 0 ; d < 5 ; d++ )
        {
            for (int h = 0 ; h < 4 ; h++)
            {
                if(Genome->days[d].hours[h].teacher[i])
                {
                    nb_heures +=2;
                }
            }
        }
        if (nb_heures < jf["prof"][i]["Restantes"].get<int>())
        {
            score += PENALITY_MANDATORY;
        }
        if (nb_heures > jf["prof"][i]["Restantes"].get<int>())
        {
            score+= jf["prof"][i]["Heuresupp"].get<int>();
        }
    }

    return score;
}

int verifcontraintesprof(GenomeClass * Genome){
  int total=0;
  for(int d=0;d<5;d++){
    for(int h=0;h<4;h++){
      for(int j=0;j<11;j++){
        if(Genome->days[d].hours[h].teacher[j]){
          total=total + jf["prof"][j]["Contraintes"][0][d]["Heures"][h]["Dispo"].get<int>();
        }
      }
    }
  }
  return total;
}

int verifcontraintessalle(GenomeClass * Genome){
  int total=0;
  int s = 0;
  for(int d=0;d<5;d++){
    for(int h=0;h<4;h++){
      for(int j=0;j<11;j++){
        if(Genome->days[d].hours[h].teacher[j]){
            s = Genome->days[d].hours[h].salles[j];
            total=total + jf["salle"][s]["Contraintes"][d]["Heures"][h]["Dispo"].get<int>();
        }
      }
    }
  }
  return total;
}

/* STUDENTS */

int check_crenau (GenomeClass * genome)
{
    int score = 0;
    int res = 0 ;
        for (int g = 0; g < 8 ; g++ )
        {
            for ( int d = 0 ; d < 5 ; d++ )
            {
                for (int h = 0 ; h < 4 ; h++)
                {
                    res = 0;
                    for ( int i = 0 ; i < 11 ; i++ )
                    {
                        if(genome->days[d].hours[h].groupes[i].grp[g] )
                        {
                            res +=1;
                        }
                    }
                }
            }
        }
        if (res > 1)
        {
            score += PENALITY_MANDATORY;
        }
    return score;
}

int check_cours ( const GenomeClass * g)
{
    int score = 0 ;
    for(int w = 0 ; w < 8; w++ )
    {
        int M = 0;
        int PTD = 0;
        int PTP = 0;
        int ITP = 0;
        int ITD = 0;
        int A = 0 ;
        for ( int i = 0 ; i < 11 ; i++ )
        {
            for ( int d = 0 ; d < 5 ; d++ )
            {
                for (int h = 0 ; h < 4 ; h++)
                {
                    if(g->days[d].hours[h].groupes[i].grp[w])
                    {
                        if (g->days[d].hours[h].type[i] == 0)
                        {
                            M += 2;
                        }
                        if (g->days[d].hours[h].type[i] == 1)
                        {
                            PTD +=2;
                        }
                        if (g->days[d].hours[h].type[i] == 2)
                        {
                            PTP += 2;
                        }
                        if (g->days[d].hours[h].type[i] == 3)
                        {
                            ITD += 2;
                        }
                        if (g->days[d].hours[h].type[i] == 4)
                        {
                            ITP += 2;
                        }
                        if (g->days[d].hours[h].type[i] == 5)
                        {
                            A += 2;
                        }
                    }
                }
            }
        }
        if (M - jf["groupe"][w]["Mrestantes"].get<int>() !=0)
        {
            score += PENALITY_MANDATORY;
        }
        if (PTD - jf["groupe"][w]["PTDrestantes"].get<int>() !=0)
        {
            score += PENALITY_MANDATORY;
        }
        if (PTP - jf["groupe"][w]["PTPrestantes"].get<int>() !=0)
        {
            score += PENALITY_MANDATORY;
        }
        if (ITD - jf["groupe"][w]["ITDestantes"].get<int>() !=0)
        {
            score += PENALITY_MANDATORY;
        }
        if (ITP - jf["groupe"][w]["ITPrestantes"].get<int>() !=0)
        {
            score += PENALITY_MANDATORY;
        }
        if (A - jf["groupe"][w]["Arestantes"].get<int>() !=0)
        {
            score += PENALITY_MANDATORY;
        }
    }
    return score;
}

int check_trou(GenomeClass * g, int days)
{
    int score = 0;
    //Penalit√© demi journ√©e
    for ( int i = 0 ; i < 11 ; i++ )
    {
    if ((g->days[days].hours[0].teacher[i]) 
        || (g->days[days].hours[1].teacher[i]))
        {
          score += PENALITY_WEAK_STUDENTS;
        }
        if ((g->days[days].hours[1].teacher[i]) 
        || (g->days[days].hours[2].teacher[i]))
        {
          score += PENALITY_WEAK_STUDENTS;
        }     
    }
    //p√©nalit√© grand trou
    for ( int i = 0 ; i < 11 ; i++ )
    {
        if ((g->days[days].hours[0].teacher[i]) 
        || (g->days[days].hours[3].teacher[i]))
        {
            score += PENALITY_MEDIUM_STUDENTS;
        }
    } 
    //p√©nalit√© journ√©e surchag√©
    for ( int i = 0 ; i < 11 ; i++ )
    {
        if ((g->days[days].hours[0].teacher[i]) 
        && (g->days[days].hours[1].teacher[i])
        && (g->days[days].hours[2].teacher[i])
        && (g->days[days].hours[3].teacher[i]))
        {
            score += PENALITY_WEAK_STUDENTS;
        }
    }
    //p√©nalit√© journ√©e vide
    for( int i = 0 ; i < 11 ; i++ )
    {
        if ((g->days[days].hours[0].teacher[i]) 
        && (g->days[days].hours[1].teacher[i]==false)
        && (g->days[days].hours[2].teacher[i]==false)
        && (g->days[days].hours[3].teacher[i]==false))
        {
            score += PENALITY_WEAK_STUDENTS;
        }
        if ((g->days[days].hours[0].teacher[i]==false) 
        && (g->days[days].hours[1].teacher[i])
        && (g->days[days].hours[2].teacher[i]==false)
        && (g->days[days].hours[3].teacher[i]==false))
        {
            score += PENALITY_WEAK_STUDENTS;
        }
        if ((g->days[days].hours[0].teacher[i]==false) 
        && (g->days[days].hours[1].teacher[i]==false)
        && (g->days[days].hours[2].teacher[i])
        && (g->days[days].hours[3].teacher[i]==false))
        {
            score += PENALITY_WEAK_STUDENTS;
        }
        if ((g->days[days].hours[0].teacher[i]==false) 
        && (g->days[days].hours[1].teacher[i]==false)
        && (g->days[days].hours[2].teacher[i]==false)
        && (g->days[days].hours[3].teacher[i]))
        {
            score += PENALITY_WEAK_STUDENTS;
        }
    }
    return score ;
}

void easeatojson(GenomeClass * Genome){
  std::string heure;
  int a;
  int b;
  for(int i=0;i<5;i++){
    for(int h=0;h<4;h++){
      a=0;
      switch(h){
        case(0):
          heure="EARLY_MORNING";
          break;
        case(1):
          heure="LATE_MORNING";
          break;
        case(2):
          heure="EARLY_AFTERNOON";
          break;
        case(3):
          heure="LATE_AFTERNOON";
          break;
      }
      for(int j=0;j<11;j++){
        if(Genome->days[i].hours[h].teacher[j]){
          b=0;
          jo["days"][i][heure][a]["Prof"] = jf["prof"][j]["ID"].get<std::string>();
          jo["days"][i][heure][a]["Matiere"]= jf["prof"][j]["Matiere"].get<std::string>();
          jo["days"][i][heure][a]["Type"] = Genome->days[i].hours[h].type[j];
          jo["days"][i][heure][a]["Salle"] = Genome->days[i].hours[h].salles[j];
          for(int g=0;g<8;g++){
            if(Genome->days[i].hours[h].groupes[j].grp[g]){
              jo["days"][i][heure][a]["Groupes"][b] = jf["groupe"][g]["nom"].get<std::string>();
              b++;
            }
          }
          a++;
        }
      }
    }
  }
  ofstream file("output.json");
  file << setw(4) << jo << endl ;
}

/* ==== CROSSOVER ==== */

int count_week_hours ( GenomeClass *s )
{
    int hours = 0;
    for ( int days = 0 ; days < 5 ; days++ )
    {
        for ( int hours = 0 ; hours < 4 ; hours++ )
        {
            for (int t = 0 ; t<11; t++)
            {
                if ( s->days[days].hours[hours].teacher[t]  )
                {
                    hours += 2;
                }
            }
        }
    }
    return hours;
}

void cross_day ( GenomeClass * g, GenomeClass * p1, GenomeClass * p2)
    {
        for ( int d = 0 ; d < 5 ; d++ )
        {
            if(tossCoin()){
                g->days[d]=p1->days[d];
            }
            else{
                g->days[d]=p2->days[d];
            }
        }
    }



void cross_hour ( GenomeClass * g, GenomeClass * p1, GenomeClass * p2)
{
    for (int d = 0; d <5; d++){
    for ( int h = 0 ; h < 4 ; h++ )
      {
        if(tossCoin()){
            g->days[d].hours[h]=p1->days[d].hours[h];
        }
        else{
            g->days[d].hours[h]=p2->days[d].hours[h];
        }
      }
    }
}
/* MUTATIONS */

void mutate_hour ( GenomeClass * g )
{
    int days      = random(0, 5);
    int hours     = random(0, 4);
    int i = random(0,10);
    init_hour(g, days, hours);
    for(int j=0;j<i;j++)
    {
        add_hour_exist(g,days,hours);
    }
    
}

\end

\User CUDA : 
\end

\Before everything else function:
  init_json();
\end

\After everything else function:
\end

\At the beginning of each generation function:
// cout<<"(DEB) FITNESS : "<<bBest->evaluate()<<endl;
\end

\At the end of each generation function:
// cout<<"(FIN) FITNESS : "<<bBest->evaluate()<<endl;
\end

\At each generation before reduce function:
//cout << "At each generation before replacement function called" << endl;
\end

\User classes:

groupe
{
    bool grp[8];
}

hour
{
    bool teacher[11];
    groupe groupes[11];
    int  type[11];
    int  salles[11];
}

day
{
    hour hours[4];
}


/* Classe repr√©sentant un g√©nome, soit un emplois du temps complet.       */
GenomeClass
{
    day days[5];
}

\end

\GenomeClass::display:
\end

\GenomeClass::initialiser :
  /* init N empty calendar */
GenomeClass Genome;
init_semaine(&Genome);
for(int d=0;d<5;d++)
{
    for(int h=0;h<4;h++)
    {
        init_hour(&Genome, d, h);
        int i = random(0,10);
        for(int j=0;j<i;j++)
        {
            add_hour_exist(&Genome,d,h);
        }
    }
}
\end




\GenomeClass::crossover :


    if( tossCoin() )
    {
        cross_day(&child, &parent1, &parent2);
    }
    else
    {
        cross_hour(&child, &parent1, &parent2);
    }

\end

\GenomeClass::mutator :

  for ( int i = 0 ; i < random(MUTATION_MIN, MUTATION_MAX) ; i++ )
  {
    mutate_hour(&Genome);
  }

\end


\GenomeClass::evaluator : // retourne le score
int score = 0;


// Application des contraintes
/* days */

for ( int days = 0 ; days < 5 ; days++ )
{
    score += check_teacher(&Genome, days);
    score += check_trou(&Genome, days);

    /* hours */
    for ( int hours = 0 ; hours < 4 ; hours++ )
    {
        score += check_hour(&Genome, days, hours);
    }
}

/* TEACHERS STUDENTS */
score += check_total_prof(&Genome);
score += check_crenau(&Genome) ;
score += check_cours(&Genome);
score += verifcontraintessalle(&Genome);
score += verifcontraintesprof(&Genome);

easeatojson(&Genome);
return score;

\end

\Default run parameters :  

  Number of generations : 1000         // NB_GEN
  Time limit:     0      // In seconds, 0 to deactivate
  Population size :   100     // POP_SIZE
  Offspring size :    40%     // 40% 
  Mutation probability :  1           // MUT_PROB
  Crossover probability : 0.75           // XOVER_PROB
  Evaluator goal :    Minimise          // Maximise
  Selection operator:   Tournament 1000
  Surviving parents:    90%     // percentage or absolute  
  Surviving offspring:  90%
  Reduce parents operator:  Tournament 1000
  Reduce offspring operator:  Tournament 1000
  Final reduce operator:  Tournament 1000

  Elitism:      Strong      //Weak or Strong
  Elite:      1
  Print stats:      true      //Default: 1
  Generate csv stats file:  false     
  Generate gnuplot script:  false
  Generate R script:    false
  Plot stats:     false     //Default: 0

  Remote island model:    false
  IP file:      ip.txt      //File containing all the remote island's IP
  Migration probability:  0

  Save population:    true
  Start from file:    false

\end